mode: deployment # This tells the Helm chart to deploy the OpenTelemetry Collector as a Kubernetes Deployment
#(i.e., a set of pods managed by a Deployment controller).
# Other modes could be daemonset (one pod per node) or statefulset, but deployment is typical for cluster-wide trace collection.
config: # This is the main OpenTelemetry Collector configuration, written in YAML.
  receivers: # These are the inputs for the Collector—how it receives telemetry data.
    otlp: # The OTLP (OpenTelemetry Protocol) receiver is enabled.
      protocols: # The Collector will accept OTLP data over both gRPC and HTTP endpoints.
        grpc: {}
        http: {}
  exporters: # These are the outputs—where the Collector sends telemetry data after processing.
    logging: # This exporter writes telemetry data to the Collector’s logs (useful for debugging).
      loglevel: debug # means you’ll see detailed trace data in the logs.
    otlp: # This exporter sends data using the OTLP protocol.
      endpoint: tempo.monitoring.svc.cluster.local:4317
      # tells the Collector to send traces to the Tempo service in the monitoring namespace, on port 4317 (the default OTLP gRPC port).
      tls:
        insecure: true # disables TLS verification (fine for in-cluster communication).
  service:
    pipelines: # Pipelines define how data flows through the Collector.
      traces: # This pipeline is for trace data.
        receivers: [otlp] # The pipeline receives traces via the OTLP receiver.
        exporters: [logging, otlp] # The pipeline sends traces to both the logging exporter (for debugging) and the OTLP exporter (to Tempo).
