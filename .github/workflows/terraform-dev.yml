# Name of the workflow 
name: 'Terraform Dev Pipeline'

# when the workflow should run: On any push or pull_request that changes files in envs/dev/, modules/, or the workflow file itself.
on:
  push:
    paths:
      - 'envs/dev/**'
      - 'modules/**'
      - '.github/workflows/terraform-dev.yml'
  pull_request:
    paths:
      - 'envs/dev/**'
      - 'modules/**'
      - '.github/workflows/terraform-dev.yml'
  # Manually, via the GitHub Actions UI (workflow_dispatch)
  workflow_dispatch:

# Sets Terraform version and working directory as environment variables.    
env:
  TF_VERSION: 1.5.7
  TF_WORKING_DIR: envs/dev

# Defines a job named "Terraform Plan & Apply" which runs on latest Ubuntu runner.   
jobs:
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
# Grants permissions for OIDC (for AWS authentication) and repo contents.
    permissions:
      id-token: write   # For OIDC
      contents: read
# Sets the default working directory to envs/dev.
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout code # Downloads your repo code into the runner. So Terraform can access your configuration files.
        uses: actions/checkout@v4

      - name: Setup Terraform # Installs the specified version of Terraform.
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # (Optional) Setup AWS credentials via OIDC
      - name: Configure AWS credentials  # Authenticates to AWS using OIDC and a role ARN stored in GitHub secrets.
        uses: aws-actions/configure-aws-credentials@v4 # Securely grants the workflow permissions to manage AWS resources.
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Terraform Format # Enforces code style and best practices.
        run: terraform fmt -check -recursive # Checks if Terraform files are properly formatted.

      - name: Terraform Init # Initializes the Terraform working directory (downloads providers, sets up backend).
        run: terraform init

      - name: Terraform Validate # Catches syntax errors or misconfigurations early. Validates the Terraform configuration files.
        run: terraform validate

      - name: Terraform Plan # Shows what changes Terraform will make, and saves the plan for later use (ensures apply uses exactly what was planned).
        id: plan
        run: terraform plan -out=tfplan.binary # Runs terraform plan and saves the plan to a binary file.

      - name: Save Plan Artifact # Uploads the plan file as an artifact. Makes the plan file available to other jobs (like apply), ensuring consistency and auditability.
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-binary
          path: ${{ env.TF_WORKING_DIR }}/tfplan.binary

  apply: # Defines a job to apply the Terraform plan.
    name: 'Terraform Apply (Manual Approval)' # Runs only after manual approval (if you set up environment protection in GitHub for dev).
    needs: terraform
    runs-on: ubuntu-latest
    environment:
      name: dev
      # Set up environment protection rules in GitHub UI for approval

    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
# Downloads the previously saved plan file. Ensures the apply step uses the exact plan that was reviewed.
      - name: Download Plan Artifact 
        uses: actions/download-artifact@v4
        with:
          name: tfplan-binary
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan.binary # Makes the actual changes to AWS, using the plan that was reviewed and approved.